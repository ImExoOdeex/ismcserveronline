generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

// do not the fuck ask why this is via email, not id ok?
model User {
  id            Int      @id @unique @default(autoincrement())
  email         String   @unique
  snowflake     String   @unique
  nick          String
  photo         String?
  everPurchased Boolean  @default(false)
  prime         Boolean  @default(false)
  subId         String?
  role          Role     @default(USER)
  guilds        Json?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  Comment      Comment[]
  SavedServer  SavedServer[]
  SampleServer SampleServer[]
  Vote         Vote[]
  OwnedServers Server[]
  Verification Verification[]
  Token        Token?

  @@index([email])
}

model Server {
  id Int @id @unique @default(autoincrement())

  // --- Custom data
  banner     String? // free
  background String? // sub

  prime Boolean @default(false)
  subId String?

  tags                  Tag[]
  vote_webhook_url      String?
  vote_webhook_password String?

  // --- Server data ---
  server  String
  host    String?
  port    Int?
  bedrock Boolean @default(false)
  online  Boolean
  favicon String?

  players Json?
  motd    Json?
  version Json?

  protocol Int?
  software String?
  ping     Int?

  // query 
  ip      String?
  plugins Json?
  map     String?

  // bedrock
  gamemode Json?
  edition  String?
  guid     String?

  // --- Server data end ---

  Check        Check[]
  Comment      Comment[]
  SavedServer  SavedServer[]
  SampleServer SampleServer[]
  Vote         Vote[]
  Verification Verification[]

  owner_id           Int?
  Owner              User?   @relation(fields: [owner_id], references: [id])
  message_from_owner String?

  @@index([id, server])
}

model Tag {
  id Int @id @unique @default(autoincrement())

  name String @unique

  servers Server[]

  created_at DateTime @default(now())
}

model Verification {
  id Int @id @unique @default(autoincrement())

  user_id Int
  User    User @relation(fields: [user_id], references: [id])

  server_id Int
  Server    Server @relation(fields: [server_id], references: [id])

  code    String  @unique
  success Boolean @default(false)

  verified_at DateTime?
  created_at  DateTime  @default(now())
}

model SavedServer {
  id Int @id @unique @default(autoincrement())

  server_id Int
  Server    Server @relation(fields: [server_id], references: [id])

  user_id Int
  User    User @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
}

enum SOURCE {
  WEB
  DISCORD
  API
}

// comments are not related to any of server of check, cuz there is no server creating when someone checks it. it's determinated via address and port
model Comment {
  id      Int  @id @unique @default(autoincrement())
  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  content String

  server_id Int
  Server    Server @relation(fields: [server_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model SampleServer {
  id Int @id @unique @default(autoincrement())

  server_id Int
  Server    Server @relation(fields: [server_id], references: [id])

  user    User? @relation(fields: [user_id], references: [id])
  user_id Int?

  payment_id     String?
  payment_status PaymentStatus @default(PROCESSING)

  add_date DateTime  @default(now())
  end_date DateTime?
}

enum PaymentStatus {
  FAILED
  CANCELLED
  PROCESSING
  PAID
}

// this server is for popular servers
model PopularServer {
  id         Int      @id @unique @default(autoincrement())
  server     String
  icon       String?
  tags       Json?
  created_at DateTime @default(now())
}

model Check {
  id Int @id @unique @default(autoincrement())

  server_id Int
  Server    Server @relation(fields: [server_id], references: [id])

  online  Boolean
  players Int

  source     SOURCE   @default(API)
  client_ip  String?
  checked_at DateTime @default(now())
  Token      Token?   @relation(fields: [token_id], references: [id])
  token_id   Int

  @@index([server_id])
}

model Token {
  id Int @id @unique @default(autoincrement())

  token     String  @unique
  client_ip String?

  user    User? @relation(fields: [user_id], references: [id])
  user_id Int?  @unique

  check Check[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Vote {
  id Int @id @unique @default(autoincrement())

  nick String

  user_id   Int
  user      User   @relation(fields: [user_id], references: [id])
  server_id Int
  Server    Server @relation(fields: [server_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
