generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

// do not the fuck ask why this is via email, not id ok?
model User {
  id            Int      @id @unique @default(autoincrement())
  email         String   @unique
  snowflake     String   @unique
  nick          String
  photo         String?
  everPurchased Boolean  @default(false)
  prime         Boolean  @default(false)
  subId         String?
  role          Role     @default(USER)
  guilds        Json?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  ad_credits    Int      @default(0)

  Comment      Comment[]
  SavedServer  SavedServer[]
  Vote         Vote[]
  OwnedServers Server[]
  Verification Verification[]
  Token        Token?
  PromotedView PromotedView[]

  @@index([email, id])
}

model Server {
  id Int @id @unique @default(autoincrement())

  // --- Custom data
  banner     String? // free
  background String? // sub

  prime Boolean @default(false)
  subId String?

  vote_webhook_url      String?
  vote_webhook_password String?

  description        String?
  language           String?
  message_from_owner String?

  // --- Server data ---
  server  String
  host    String?
  port    Int?
  bedrock Boolean @default(false)
  online  Boolean
  favicon String?

  players Json?
  motd    Json?
  version Json?

  protocol Int?
  software String?
  ping     Int?

  // query 
  ip      String?
  plugins Json?
  map     String?

  // bedrock
  gamemode Json?
  edition  String?
  guid     String?

  // --- Server data end ---

  Check        Check[]
  Comment      Comment[]
  SavedServer  SavedServer[]
  Vote         Vote[]
  Verification Verification[]
  Tags         Tag[]          @relation(name: "Tags")
  TagsCreated  Tag[]          @relation(name: "TagsCreated")
  ServerToken  ServerToken[]
  Promoted     Promoted[]

  owner_id Int?
  Owner    User? @relation(fields: [owner_id], references: [id])

  created_at DateTime @default(now())

  @@index([id, server, bedrock])
}

model Promoted {
  id Int @id @unique @default(autoincrement())

  views_limit  Int
  color        String
  status       PromotedStatus @default(Active)
  PromotedView PromotedView[]
  Tags         Tag[]          @relation(name: "PromotedTags")

  server_id Int
  Server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@index([id, server_id])
}

enum PromotedStatus {
  Active
  Disabled
  OutOfViews
}

model PromotedView {
  id Int @id @unique @default(autoincrement())

  type       PromotedViewType @default(Impression)
  client_ip  String
  user_agent String?

  promoted_id Int
  Promoted    Promoted @relation(fields: [promoted_id], references: [id])

  user_id Int?
  User    User? @relation(fields: [user_id], references: [id])

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@index([promoted_id, id])
}

enum PromotedViewType {
  Impression
  Click
}

model Tag {
  id Int @id @unique @default(autoincrement())

  name String @unique

  servers Server[] @relation(name: "Tags")

  createdByServerId Int?
  Server            Server? @relation(fields: [createdByServerId], references: [id], name: "TagsCreated", onDelete: Cascade)

  Promoted Promoted[] @relation(name: "PromotedTags")

  created_at DateTime @default(now())

  @@index([name, id])
}

model Verification {
  id Int @id @unique @default(autoincrement())

  user_id Int
  User    User @relation(fields: [user_id], references: [id])

  server_id Int
  Server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  code    String  @unique
  success Boolean @default(false)

  verified_at DateTime?
  created_at  DateTime  @default(now())

  @@index([user_id, server_id])
}

model SavedServer {
  id Int @id @unique @default(autoincrement())

  server_id Int
  Server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  user_id Int
  User    User @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())

  @@index([user_id, server_id, id])
}

enum SOURCE {
  WEB
  DISCORD
  API
}

model Comment {
  id      Int  @id @unique @default(autoincrement())
  user_id Int
  user    User @relation(fields: [user_id], references: [id])

  content String

  server_id Int
  Server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@index([user_id, server_id])
}

enum PaymentStatus {
  FAILED
  CANCELLED
  PROCESSING
  PAID
}

model Check {
  id Int @id @unique @default(autoincrement())

  server_id Int
  Server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  online  Boolean
  players Int

  source     SOURCE   @default(API)
  client_ip  String?
  checked_at DateTime @default(now())
  Token      Token?   @relation(fields: [token_id], references: [id])
  token_id   Int

  @@index([server_id])
}

model Token {
  id Int @id @unique @default(autoincrement())

  token String @unique

  user    User? @relation(fields: [user_id], references: [id])
  user_id Int?  @unique

  check Check[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([token, id])
}

model ServerToken {
  id Int @id @unique @default(autoincrement())

  token String @unique
  calls Int    @default(0)

  server_id Int    @unique
  Server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([token, id])
}

model Vote {
  id Int @id @unique @default(autoincrement())

  nick                String
  reward_collected    Boolean   @default(false)
  reward_collected_at DateTime?

  user_id   Int
  user      User   @relation(fields: [user_id], references: [id])
  server_id Int
  Server    Server @relation(fields: [server_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id, nick, server_id])
}
