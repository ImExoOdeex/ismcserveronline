generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// do not the fuck ask why this is via email, not id ok?
model User {
  id          Int           @id @unique @default(autoincrement())
  email       String        @unique
  snowflake   String        @unique
  nick        String
  photo       String?
  bio         String?
  guilds      Json?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  Comment     Comment[]
  SavedServer SavedServer[]

  @@index([email])
}

model SavedServer {
  id      Int     @id @unique @default(autoincrement())
  server  String
  icon    String?
  online  Boolean @default(true)
  players Int     @default(0)
  bedrock Boolean @default(false)

  user_id Int
  User    User @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
}

enum SOURCE {
  WEB
  DISCORD
  API
}

// comments are not related to any of server of check, cuz there is no server creating when someone checks it. it's determinated via address and port
model Comment {
  id         Int      @id @unique @default(autoincrement())
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id])
  server     String
  bedrock    Boolean  @default(false)
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model SampleServer {
  id       Int       @id @unique @default(autoincrement())
  server   String
  bedrock  Boolean   @default(false)
  favicon  String
  add_date DateTime  @default(now())
  end_date DateTime?
}

// this server is for popular servers
model Server {
  id         Int      @id @unique @default(autoincrement())
  server     String
  icon       String?
  tags       Json?
  created_at DateTime @default(now())
}

model Check {
  id         Int      @id @unique @default(autoincrement())
  server     String
  online     Boolean
  players    Int
  bedrock    Boolean  @default(false)
  source     SOURCE   @default(API)
  client_ip  String?
  checked_at DateTime @default(now())
  Token      Token?   @relation(fields: [token_id], references: [id])
  token_id   Int

  @@index([server])
}

model Token {
  id         Int      @id @unique @default(autoincrement())
  token      String   @unique
  user_id    String   @unique
  check      Check[]
  client_ip  String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
